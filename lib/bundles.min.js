const log=require("loglevel"),fs=require("fs-extra"),path=require("path"),result=require("./result"),_=require("./utilities"),Bundle=require("./bundle");function Bundles(e,n={}){return result.setConfig(n),parseConfig(e,n).then(createBundles).then(e=>runParsedBundles(e,result.config.run)).catch(e=>(log.error(e),e))}function runParsedBundles(e=[],n){n&&result.setConfig({run:n});const t=!(n&&!0!==n&&n instanceof Array);return _.isObject(e)&&(e=[e]),Promise.all(e.map(e=>t||n.includes(e.id)?e.run():(e.success="skipped",e))).then(result.log)}function parseConfig(e="",n={}){return new Promise((t,r)=>{if(result.setConfig(_.isObject(n)?n:{}),Bundle.setDefaults({options:n}),log.setDefaultLevel(["trace","debug","info","warn","error","silent"].includes(result.config.loglevel)?result.config.loglevel:"info"),"string"==typeof e){e=e.split(":"),!result.config.run&&e[1]&&result.setConfig({run:e[1]});const n=resolveConfigFile(e=e[0]);if(!n)return r(new Error(`Config file not found. ${e}`));e=n.config,result.config.path=path.relative(process.cwd(),n.filepath)}return _.isObject(e)&&(e.bundles?(e.options&&result.setConfig(Object.assign({},e.options,result.config)),e.data&&Bundle.setDefaults({options:result.config,data:e.data}),e=_.isObject(e.bundles)?[e.bundles]:e.bundles):e=e.input&&e.bundlers?[e]:Object.keys(e).map((n,t)=>{const r=e[n];return r.id=n,r})),e instanceof Array?t(e):r(new Error("Bundles must be an Object or Object[]."))})}function resolveConfigFile(e=""){const n=require("cosmiconfig")("bundles");let t;if(e){if("string"==typeof e){if(!fs.pathExistsSync(e))return t;t=n.loadSync(e)}}else t=n.searchSync(""),log.info(`Found config file: ${path.relative(process.cwd(),t.filepath)}`);return t}function createBundles(e=[]){return e instanceof Array||(e=[e]),e=e.map((e,n)=>_.isObject(e)?(e.id=e.id||n,(e=new Bundle(e))._meta.configFile=result.config.path,e):(Bundles.result.errors.push(`Bundle [${n}] was not added, it must be an Object.`),{input:e,_meta:{valid:!1}}))}Bundles.run=Bundles,Bundles.result=result,module.exports=Bundles;