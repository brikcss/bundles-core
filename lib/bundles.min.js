const path=require("path"),fs=require("fs-extra"),globby=require("globby"),matter=require("gray-matter"),log=require("loglevel"),merge=require("@brikcss/merge");function compile(e="",n={}){return resolveConfig(e,n).then(runBundles).then(createWatchers).then(prepResults).catch(e=>(log.error(e),e))}function resolveConfig(e="",n={}){return new Promise((t,r)=>{let s=!1;if("string"==typeof e){const t=require("cosmiconfig")("bundles");if(e){if(!fs.pathExistsSync(e))return r(new Error("Config file not found."));e=e.split(":"),n.bundles=n.bundles||e[1]||void 0,"all"!==n.bundles&&"string"==typeof n.bundles&&(n.bundles=n.bundles.split(/,?\s+/)),e=e[0],e=t.loadSync(e)}else e=t.searchSync(e),log.info(`Config file found: ${e.filepath}`);if(!e)return r(new Error("Config file was not found."));s=e.filepath,e=e.config}return e.input&&e.bundlers&&(e={bundles:[e]}),e=Object.assign({success:!1,bundles:[],bundlesMap:{},options:{},data:{},watchers:{},on:{}},e,{options:n,_meta:{configFile:s,createdWatchers:!1}}),log.setDefaultLevel(["trace","debug","info","warn","error","silent"].includes(e.options.loglevel)?e.options.loglevel:"info"),e.bundles=normalizeBundles(e.bundles,e.options,e.data),t(e)})}function runBundles(e={}){const n=[],t=[];return e.bundles.forEach((r,s)=>{!r._meta.isValid||e.options.bundles&&!e.options.bundles.includes(r.id)?(r.success="skipped",n.push(r)):(t.push(r.id),n.push(runBundle(r)))}),log.info(`Bundling [${t.join(", ")}]...`),Promise.all(n).then(n=>(e.bundles=n,e))}function createWatchers(e={}){if(e._meta.createdWatchers)return e;if(e._meta.createdWatchers=!0,"string"==typeof e.options.watch&&(e.options.watch=e.options.watch.split(/,?\s+/)),!1===e.options.watch)return e;e.options.watch instanceof Array||(e.options.watch=Boolean(e.options.watch));const n=require("chokidar"),t=[];return e.bundles.forEach((r,s)=>{(r.watch||e.options.watch&&!(e.options.watch instanceof Array&&e.options.watch.includes(r.id))||e.watchers[r.id])&&t.push(new Promise((t,s)=>{const o=n.watch(r.output.map(e=>e.source.path),"object"==typeof r.watch?r.watch:{});o.on("change",n=>{if(log.info(`File changed: ${path.relative(process.cwd(),n)}`),r._meta.isWatching)return r.errors=[],e.errors=[],e.options.bundles=[r.id],r.output.some((t,s)=>t.source.path===n&&(r.output[s]=Object.assign(r.output[s],readFile(n,e.options.frontMatter||{})),!0)),runBundles(e).then(prepResults)}).on("error",s).on("ready",()=>{r._meta.isWatching=!0,t()}),e._meta.configFile&&o.add(e._meta.configFile),o.id=r.id,e.watchers[r.id]=o}))}),t.length&&log.info(`Watching [${Object.keys(e.watchers).join(", ")}]...`),Promise.all(t).then(()=>e)}function prepResults(e={}){return e.success=!e.bundles.some(e=>!e._meta.isValid||!e.success),e.bundlesMap={},e.bundles.forEach((n,t)=>{e.bundlesMap[n.id]=e.bundles[t]}),e.errors=e.bundles.reduce((e,n,t)=>e.concat(n.errors),[]),e.errors.length&&(log.error(e.errors.length>1?`There were ${e.errors.length} errors...`:"There was an error..."),e.errors.forEach(e=>log.error(e))),e.success?log.info(`[ok] Success${e.errors.length?` with ${e.errors.length} error(s).`:"!"}`):log.info("[!!] Failed. Check errors."),e}function runBundle(e={}){return e.bundlers.reduce((n,t,r)=>n.then(e=>{const n=t.run(e,t);return t.success=!0,n}).catch(n=>(t.success=!1,e.errors.push(n),e)),Promise.resolve(e)).then(e=>(e.success=e.bundlers.every(e=>e.success),e)).catch(n=>(e.success=!1,e.errors.push(n),e))}function normalizeBundles(e=[],n={},t={}){return e instanceof Object&&e.constructor===Object&&(e=[e]),e instanceof Array||throwError("`config.bundles` must be an Array."),e.map((e,r)=>normalizeBundle(e,n,r,t))}function normalizeBundle(e={},n={},t,r={}){return e instanceof Object||(e={_meta:{isValid:!1}}),"string"==typeof(e=Object.assign({errors:[],id:String(t),input:[],output:[],bundlers:[],data:{},watch:Boolean(n.watch||e.watch),on:{},_meta:{}},e)).input?(e._meta.inputIsContent=!0,e.input=[e.input]):e.input instanceof Array&&(e.input.forEach((n,t)=>{if(0===n.indexOf("gh:"))if(1===(n=n.slice(3).split("@")).length)n=`https://github.com/${n[0]}.git`;else if(2===n.length)n=`https://${n[0]}@github.com/${n[1]}.git`;else if(n.length>2){const e=n[0].length;n=`https://${n[0]}@github.com/${n.join("@").slice(e)}.git`}if(0===n.indexOf("http://")||0===n.indexOf("https://")||0===n.indexOf("git@")){const r=path.join(".repos",path.basename(n).replace(".git","")),s=require("child_process").execSync;fs.ensureDirSync(".repos"),fs.removeSync(r),s(`git clone ${n} ${r}`),e.input[t]=r}}),e.input=globby.sync(e.input,Object.assign({dot:!0},n.glob||{}))),e.input.forEach((t,s)=>{const o=e.output[s]=readFile(t,n.frontMatter||{},e._meta.inputIsContent);o.data=merge({},o.data,"function"==typeof r?r(o,e):r||{},"function"==typeof e.data?e.data(o,e):e.data||{})}),"string"==typeof e.bundlers&&(e.bundlers=e.bundlers.split(/,?\s+/)),e.bundlers=e.bundlers.map(n=>resolveBundler(n,e)),e._meta.isValid=isValidBundle(e),e}function readFile(e,n={},t=!1){const r={};return r.source=t?matter(e,n):matter.read(e,n),r.source.path=t?void 0:path.normalize(e),r.content=r.source.content,0===r.content.indexOf("\n")&&(r.content=r.content.slice(1)),r.data=r.source.data,r}function resolveBundler(e,n){if(e instanceof Object&&e.constructor===Object||(e={run:e}),e._meta=e._meta||{},e._meta.isValid=!0,e.success=!1,"function"==typeof e.run)return e;if(!e.run||"string"!=typeof e.run)return e._meta.isValid=!1,e;if(0!==e.run.indexOf("./")&&0!==e.run.indexOf("../")||(e.run=path.resolve(e.run)),-1===path.basename(e.run).indexOf("bundles-")){const n=path.join(path.dirname(e.run),"bundles-"+path.basename(e.run));try{require.resolve(n)&&(e.run=n)}catch(e){}}try{e.run=require(e.run)}catch(t){return e._meta.isValid=!1,n.errors.push(t),e}return"function"!=typeof e.run&&(e._meta.isValid=!1),e}function isValidBundle(e={}){return e instanceof Object&&e.input instanceof Array&&e.input.every(e=>"string"==typeof e)&&e.bundlers instanceof Array&&e.bundlers.length&&e.bundlers.some(e=>e._meta.isValid)}function throwError(e="Uh oh..."){throw new Error(e)}module.exports=compile;